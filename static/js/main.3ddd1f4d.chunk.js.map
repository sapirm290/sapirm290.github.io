{"version":3,"sources":["media/landing-page.PNG","media/minecraft.PNG","media/plan.PNG","components/HomePage.jsx","components/ProjectDemo.jsx","components/Projects.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","className","href","ProjectDemo","description","codeLink","siteLink","image","class","src","alt","Projects","landingPageImage","minecraftImage","planImage","App","useState","tab","setTab","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,mLCgB5BC,G,MAdE,WACb,OACI,6BACI,wBAAIC,UAAU,UAAd,kBADJ,2MAK8C,6BAAM,6BALpD,cAMe,uBAAGC,KAAK,8BAAR,uBACX,6BAAM,uBAAGA,KAAK,gCAAR,iBCIHC,G,MAZK,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACpD,OACI,6BAASN,UAAU,QACf,uBAAGA,UAAU,uBAAuBG,GACpC,uBAAGH,UAAU,iBAAgB,uBAAGO,MAAM,eAAeN,KAAMG,GAA9B,QAA7B,IACa,uBAAGG,MAAM,eAAeN,KAAMI,GAA9B,UACb,yBAAKG,IAAKF,EAAOG,IAAI,2B,gDCalBC,EAhBE,WACb,OACI,6BACI,wBAAIV,UAAU,UAAd,0BACA,wBAAIA,UAAU,cAAd,qBAFJ,yEAG0E,6BAH1E,6DAIoC,6BAJpC,gCAKI,wBAAIA,UAAU,cAAd,oBACA,kBAAC,EAAD,CAAaG,YAAY,gCAAgCC,SAAS,4CAA4CC,SAAS,4CAA6CC,MAAOK,MAC3K,kBAAC,EAAD,CAAaR,YAAY,wCAAwCC,SAAS,yCAAyCC,SAAS,yCAAyCC,MAAOM,MAC5K,kBAAC,EAAD,CAAaT,YAAY,iJACWC,SAAS,uCAAuCC,SAAS,gDAAgDC,MAAOO,QCKjJC,MAlBf,WAAgB,IAAD,EACSC,mBAAS,QADlB,mBACNC,EADM,KACDC,EADC,KAEb,OACE,yBAAKjB,UAAU,OACb,6BACE,wBAAIkB,GAAG,OACL,wBAAIX,MAAM,WAAWY,QAAS,WAAQF,EAAO,UAA7C,SACA,wBAAIV,MAAM,WAAWY,QAAS,WAAQF,EAAO,cAA7C,eAGJ,0BAAMV,MAAM,gBACD,SAARS,EAAiB,kBAAC,EAAD,MAAe,kBAAC,EAAD,SCHrBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ddd1f4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/landing-page.dc5f0a76.PNG\";","module.exports = __webpack_public_path__ + \"static/media/minecraft.48274dcd.PNG\";","module.exports = __webpack_public_path__ + \"static/media/plan.9abc870c.PNG\";","import React from 'react'\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div>\r\n            <h1 className='header'>Hi, I am Sapir</h1>\r\n            I'm a fulllstack web developer based in Israel.\r\n                        I build websites and servers.\r\n                        I am pasionate about crafting great sites, and would love to create along with you.\r\n                I am open for job offers and projects.<br /><br />\r\n            Let's chat <a href=\"mailto:sapirm290@gmail.com\">sapirm290@gmail.com</a>\r\n            <br /><a href=\"https://github.com/sapirm290\">My Github </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\n\r\nimport './ProjectDemo.css'\r\nconst ProjectDemo = ({ description, codeLink, siteLink, image }) => {\r\n    return (\r\n        <article className='demo'>\r\n            <p className='project-description'>{description}</p>\r\n            <p className='project-links'><a class=\"project-link\" href={codeLink}>\r\n                Code</a> <a class=\"project-link\" href={siteLink}> Site</a></p>\r\n            <img src={image} alt='sample landing page' />\r\n\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default ProjectDemo\r\n","import React from 'react'\r\nimport ProjectDemo from './ProjectDemo'\r\nimport landingPageImage from '../media/landing-page.PNG'\r\nimport minecraftImage from '../media/minecraft.PNG'\r\nimport planImage from '../media/plan.PNG'\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div>\r\n            <h1 className='header'>What can I do for you?</h1>\r\n            <h2 className='sub-header'>I've worked with:</h2>\r\n            Front-end: HTML, CSS, JS, Jquery, Bootstrap, Material-UI, React, Redux<br />Back-end: Python, Django,\r\n            Django-rest. JavaScript, Node.js<br /> Databases: PostgreSQL, MySQl\r\n            <h2 className='sub-header'>Some of my work:</h2>\r\n            <ProjectDemo description='Basic HTML & CSS landing page' codeLink='https://github.com/sapirm290/Landing_page' siteLink='https://sapirm290.github.io/Landing_page/'  image={landingPageImage}/>\r\n            <ProjectDemo description='A simple minecraft like game using JS' codeLink='https://github.com/sapirm290/Minecraft' siteLink='https://sapirm290.github.io/Minecraft/' image={minecraftImage} />\r\n            <ProjectDemo description=' A full APP using React, Redux, Material UI for the front-end, and Python, Django, Django-rest, knox auth\r\n            for the back-end. hosted on Heroku' codeLink='https://github.com/sapirm290/planner' siteLink='https://arcane-cliffs-92152.herokuapp.com/?#/' image={planImage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects\r\n","import React, { useState } from 'react';\nimport './style.css'\nimport HomePage from './components/HomePage'\nimport Projects from './components/Projects'\nfunction App() {\n  const [tab, setTab] = useState('home')\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul id='nav'>\n          <li class='nav-item' onClick={() => { setTab('home') }}> Home</li>\n          <li class='nav-item' onClick={() => { setTab('projects') }}> Projects</li>\n        </ul>\n      </nav>\n      <main class=\"my-container\">\n        {tab === 'home' ? <HomePage /> : <Projects />}\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}